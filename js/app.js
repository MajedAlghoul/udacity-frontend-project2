//========================Varaibles Defenition====================
//================================================================

// all sections in the page
const sections = document.querySelector("main").querySelectorAll("section");

// nav bar
const nav = document.querySelector("#navbar__list");

//========================Main Program============================
//================================================================

// stores fragment generated by generateNavItems function
const items = generateNavItems();

// Attatches click Listeners to all nav bar items
attatchListeners();

// Appends generated nav items to the nav bar
nav.appendChild(items);

// Attatches scroll Listener to the window object
attatchScrollListener();

//========================Helper Functions========================
//================================================================

/*
Generates and returns a fragment containing
nav bar items generated dynamically from sections in the main element
 */
function generateNavItems() {
  let fragment = document.createDocumentFragment();
  for (let i = 0; i < sections.length; i++) {
    const section = sections[i];
    const navItem = document.createElement("li");
    navItem.classList.add("menu__link");
    // fix for page load on no scroll
    if (i === 0) {
      navItem.classList.add("active__section");
    }
    navItem.innerHTML = section.getAttribute("data-nav");
    fragment.append(navItem);
  }

  return fragment;
}

/*
Attatches click Listeners to all nav bar items
so they can scroll to the correct section
 */
function attatchListeners() {
  const childs = items.children;
  for (let i = 0; i < childs.length; i++) {
    const child = childs[i];
    child.addEventListener("click", (event) => {
      sections[i].scrollIntoView({ behavior: "smooth" });
    });
  }
}

/*
Attatches scroll Listener to the window object to keep track
of the current section and update the appropriate nav bar item's style
 */
function attatchScrollListener() {
  window.addEventListener("scroll", () => {
    let activeSectionIndex = -1;
    let closest = Number.MAX_VALUE;

    //finds the closest section to the top edge of the viewport
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      const top = section.getBoundingClientRect().top;
      const distance = Math.abs(top);

      if (distance < closest) {
        closest = distance;
        activeSectionIndex = i;
      }
    }

    //updates the nav bar for the active section
    if (activeSectionIndex !== -1) {
      document.querySelectorAll(".menu__link").forEach((navItem, index) => {
        if (index === activeSectionIndex) {
          navItem.classList.add("active__section");
        } else {
          navItem.classList.remove("active__section");
        }
      });
    }
  });
}
